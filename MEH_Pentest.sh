#!/bin/bash

# Banner
echo -e "\033[1;31m
███╗   ███╗███████╗██╗  ██╗
████╗ ████║██╔════╝██║  ██║
██╔████╔██║█████╗  ███████║
██║╚██╔╝██║██╔══╝  ██╔══██║
██║ ╚═╝ ██║███████╗██║  ██║
╚═╝     ╚═╝╚══════╝╚═╝  ╚═╝

        Created by A.M Pachouri
        YouTube        -- @mastersinethicalhacking
        Instagram      -- @mastersinethicalhacking
        Facebook       -- MastersInEthicalHacking
\033[0m"

# Function to check if a package is installed
check_installed() {
    dpkg -l | grep -i "$1" &> /dev/null
    return $?
}

# Function to display the purpose of a tool
display_tool_purpose() {
    local tool_name=$1
    case "$tool_name" in
        "nmap") echo "Nmap: A network exploration tool and security/port scanner." ;;
        "recon-ng") echo "Recon-ng: A full-featured web reconnaissance framework." ;;
        "theHarvester") echo "theHarvester: Used to gather emails, subdomains, and names from public sources." ;;
        "amass") echo "Amass: A tool for network mapping of attack surfaces." ;;
        "spiderfoot") echo "Spiderfoot: An open-source intelligence automation tool." ;;
        "masscan") echo "Masscan: An Internet-scale port scanner, faster than Nmap." ;;
        "zmap") echo "ZMap: A fast network scanner." ;;
        "netcat") echo "Netcat: A utility for reading and writing from TCP/UDP connections." ;;
        "nikto") echo "Nikto: A web server scanner to find vulnerabilities." ;;
        "sqlmap") echo "SQLMap: Detects and exploits SQL injection flaws." ;;
        "john") echo "John the Ripper: A password cracking tool." ;;
        "hydra") echo "Hydra: A fast network logon cracker." ;;
        "aircrack-ng") echo "Aircrack-ng: A suite to assess Wi-Fi network security." ;;
        "bettercap") echo "Bettercap: A powerful MITM tool and analysis framework." ;;
        "tcpdump") echo "TCPDump: A command-line packet analyzer." ;;
        "wireshark") echo "Wireshark: A network protocol analyzer." ;;
        "metasploit") echo "Metasploit: A penetration testing platform." ;;
        "burpsuite") echo "Burp Suite: Web vulnerability scanner." ;;
        "zap") echo "OWASP ZAP: A web application security scanner." ;;
        "autopsy") echo "Autopsy: Digital forensics platform and GUI for The Sleuth Kit." ;;
        "volatility") echo "Volatility: Advanced memory forensics framework." ;;
        "ghidra") echo "Ghidra: A software reverse engineering framework." ;;
        "ida-pro") echo "IDA Pro: A powerful multi-processor disassembler and debugger." ;;
        "radare2") echo "Radare2: An open-source reverse engineering framework." ;;
        "ollydbg") echo "OllyDbg: A 32-bit assembler level analyzing debugger for Windows." ;;
        "proxychains") echo "ProxyChains: Tool to redirect connections through proxy servers." ;;
        "clair") echo "Clair: Static vulnerability scanner for application containers." ;;
        "trivy") echo "Trivy: A comprehensive security scanner for containers." ;;
        "kube-hunter") echo "Kube-hunter: Security scanner for Kubernetes clusters." ;;
        "scout-suite") echo "Scout Suite: Multi-cloud security-auditing tool." ;;
        "pacu") echo "Pacu: AWS exploitation framework." ;;
        "apktool") echo "APKTool: Decompiles and rebuilds APK files." ;;
        "drozer") echo "Drozer: Android security assessment framework." ;;
        "frida") echo "Frida: Dynamic instrumentation toolkit." ;;
        "mobsf") echo "Mobile Security Framework (MobSF): Automated pen-testing for Android/iOS." ;;
        *)
            echo "No description available for $tool_name."
            ;;
    esac
}

# Function to install tool with alternate method if the default fails
alternate_install() {
    local tool_name=$1
    case "$tool_name" in
        "nmap") echo "Alternate method: Visit https://nmap.org/download.html for manual installation." ;;
        "recon-ng") echo "Alternate method: Clone the repository from https://github.com/lanmaster53/recon-ng" ;;
        "theHarvester") echo "Alternate method: Clone from GitHub https://github.com/laramies/theHarvester" ;;
        "amass") echo "Alternate method: Install via snap - 'sudo snap install amass'" ;;
        "spiderfoot") echo "Alternate method: Install via Python pip - 'pip install spiderfoot'" ;;
        "masscan") echo "Alternate method: Clone the repo from https://github.com/robertdavidgraham/masscan" ;;
        "zmap") echo "Alternate method: Clone from https://github.com/zmap/zmap" ;;
        "netcat") echo "Alternate method: Manual install from source at https://nc110.sourceforge.io/" ;;
        "nikto") echo "Alternate method: Clone from https://github.com/sullo/nikto" ;;
        "sqlmap") echo "Alternate method: Clone from https://github.com/sqlmapproject/sqlmap" ;;
        "john") echo "Alternate method: Clone from https://github.com/openwall/john" ;;
        "hydra") echo "Alternate method: Clone from https://github.com/vanhauser-thc/thc-hydra" ;;
        "aircrack-ng") echo "Alternate method: Download from https://www.aircrack-ng.org/" ;;
        "bettercap") echo "Alternate method: Clone from https://github.com/bettercap/bettercap" ;;
        "tcpdump") echo "Alternate method: Download from http://www.tcpdump.org/" ;;
        "wireshark") echo "Alternate method: Download from https://www.wireshark.org/download.html" ;;
        "metasploit") echo "Alternate method: Install via 'curl https://raw.githubusercontent.com/rapid7/metasploit-framework/master/msfupdate | sudo bash'" ;;
        "burpsuite") echo "Alternate method: Download from https://portswigger.net/burp/communitydownload" ;;
        "zap") echo "Alternate method: Download from https://www.zaproxy.org/download/" ;;
        "ghidra") echo "Alternate method: Download from https://ghidra-sre.org/" ;;
        "volatility") echo "Alternate method: Clone from https://github.com/volatilityfoundation/volatility" ;;
        "clair") echo "Alternate method: Install via Docker 'docker run --rm quay.io/coreos/clair:latest'" ;;
        "trivy") echo "Alternate method: Install via GitHub release https://github.com/aquasecurity/trivy/releases" ;;
        *)
            echo "No alternate installation method available for $tool_name."
            ;;
    esac
}

# Function to install necessary dependencies and tools
install_tool() {
    local tool_name=$1
    display_tool_purpose "$tool_name"

    if check_installed "$tool_name"; then
        echo "$tool_name is already installed."
    else
        echo "Installing $tool_name..."
        if sudo apt-get install -y "$tool_name"; then
            echo "$tool_name successfully installed."
        else
            echo "Failed to install $tool_name via apt-get. Checking alternate methods..."
            alternate_install "$tool_name"
        fi
    fi
}

# Display categories
echo "Select a category:"
echo "1. Information Gathering"
echo "2. Network Scanning"
echo "3. Vulnerability Scanning"
echo "4. Exploitation Frameworks"
echo "5. Web Application Testing"
echo "6. Password Cracking"
echo "7. Wireless Security"
echo "8. Reverse Engineering"
echo "9. Forensics"
echo "10. Social Engineering"
echo "11. Mobile Testing"
echo "12. Network Analysis"
echo "13. Proxy Tools"
echo "14. Container Security"
echo "15. Cloud Security"
echo "16. Miscellaneous Tools"
read -p "Enter category number: " category

# Define tools by category
case "$category" in
    1)
        tools=("nmap" "recon-ng" "theHarvester" "amass" "spiderfoot")
        ;;
    2)
        tools=("masscan" "zmap" "netcat" "tcpdump" "wireshark")
        ;;
    3)
        tools=("nikto" "sqlmap")
        ;;
    4)
        tools=("metasploit")
        ;;
    5)
        tools=("burpsuite" "zap")
        ;;
    6)
        tools=("john" "hydra")
        ;;
    7)
        tools=("aircrack-ng" "bettercap")
        ;;
    8)
        tools=("ghidra" "ida-pro" "radare2" "ollydbg")
        ;;
    9)
        tools=("autopsy" "volatility")
        ;;
    10)
        tools=("proxychains")
        ;;
    11)
        tools=("apktool" "drozer" "frida" "mobsf")
        ;;
    12)
        tools=("clair" "trivy" "kube-hunter" "scout-suite")
        ;;
    13)
        tools=("pacu")
        ;;
    16)
        tools=("proxychains")
        ;;
    *)
        echo "Invalid category selected."
        exit 1
        ;;
esac

# List tools in the selected category
echo "Select a tool to install:"
for i in "${!tools[@]}"; do
    echo "$((i+1)). ${tools[$i]}"
done

read -p "Enter tool number: " tool_number
tool="${tools[$tool_number-1]}"

# Install the selected tool
install_tool "$tool"
